{"version":3,"sources":["components/SingInForm/SingInForm.module.css","components/SingInForm/SingInForm.jsx","pages/auth/SingInPage.jsx"],"names":["module","exports","SingInForm","t","useTranslation","lang","dispatch","useDispatch","useState","email","setEmail","password","setPassword","isBtnDisabled","messageNotValid","language","console","log","name","className","s","loginForm","initialValues","remember","labelCol","span","wrapperCol","onFinish","values","authOperations","logIn","Item","label","onChange","e","target","value","rules","type","message","required","containerInput","placeholder","prefix","SettingFilled","Password","LockOutlined","siteFormItemIcon","htmlType","button","disabled","textContainer","link","href","SingInPage","Appear","time"],"mappings":"mIACAA,EAAOC,QAAU,CAAC,UAAY,8BAA8B,OAAS,2BAA2B,cAAgB,kCAAkC,KAAO,yB,2LCsH1IC,EA3GI,WAEjB,IAAQC,EAAMC,cAAND,EACFE,EAAOD,cAGPE,EAAWC,cAEjB,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAEMC,GAAiBJ,IAAUE,EAW3BG,EAAgC,OADpBT,EAAK,GAAGU,SACkB,iCAAkC,+PAG9E,OAFAC,QAAQC,IAAIH,GAIV,eAAC,IAAD,CACEI,KAAK,eACLC,UAAWC,IAAEC,UACbC,cAAe,CACbC,UAAU,GAEZC,SAAU,CACRC,KAAM,GAERC,WAAY,CACVD,KAAM,IAERE,SA1Ba,SAACC,GAChBtB,EAASuB,IAAeC,MAAM,CAAErB,QAAOE,aAIxC,EASC,UAeE,cAAC,IAAKoB,KAAN,CACEb,KAAK,QACLc,MAAO7B,EAAE,oBACT8B,SAAU,SAAAC,GAAC,OAAGxB,EAASwB,EAAEC,OAAOC,MAArB,EAEXC,MAAO,CACL,CACEC,KAAM,QACNC,QAASzB,GAEX,CACE0B,UAAU,EACVD,QAAS,8BAZf,SAgBE,cAAC,IAAD,CACApB,UAAWC,IAAEqB,eACbC,YAAavC,EAAE,+BACfwC,OAAQ,cAACC,EAAA,EAAD,QAGV,cAAC,IAAKb,KAAN,CACCC,MAAM,WACLd,KAAMf,EAAE,uBACR8B,SAAU,SAAAC,GAAC,OAAGtB,EAAYsB,EAAEC,OAAOC,MAAxB,EACXC,MAAO,CACL,CACEG,UAAU,EACVD,QAAS,gCAPf,SAWE,cAAC,IAAMM,SAAP,CACE1B,UAAWC,IAAEqB,eACbE,OAAQ,cAACG,EAAA,EAAD,CAAc3B,UAAWC,IAAE2B,mBACnCT,KAAK,WACLI,YAAavC,EAAE,sCAKnB,eAAC,IAAK4B,KAAN,WAEE,cAAC,IAAD,CACEO,KAAK,UACLU,SAAS,SACT7B,UAAWC,IAAE6B,OACbC,SAAUrC,EAJZ,SAMIV,EAAE,4BAEF,sBAAKgB,UAAWC,IAAE+B,cAAlB,UACE,8BAAIhD,EAAE,iBAAN,OACC,mBACHgB,UAAWC,IAAEgC,KACbC,KAAK,YAFF,SAEelD,EAAE,wCAO/B,E,eCxGcmD,UARI,WACjB,OACE,cAACC,EAAA,EAAD,CAAQC,KAAM,IAAd,SACE,cAAC,EAAD,KAGL,C","file":"static/js/6.e5f56cbe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginForm\":\"SingInForm_loginForm__3VQtF\",\"button\":\"SingInForm_button__3KhYt\",\"textContainer\":\"SingInForm_textContainer__14e3r\",\"link\":\"SingInForm_link__3ARMS\"};","import { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { authOperations } from 'redux/auth';\nimport 'antd/dist/antd.css';\nimport { LockOutlined, SettingFilled } from '@ant-design/icons';\n\nimport { Button, Form, Input } from 'antd';\nimport s from './SingInForm.module.css'\nimport { useTranslation } from 'react-i18next';\n\n\n\nconst SingInForm = () => {\n\n  const { t } = useTranslation();\n  const lang = useTranslation();\n  \n\n  const dispatch = useDispatch()\n \n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const isBtnDisabled = !email || !password;\n\n  const onFinish = (values) => {\n    dispatch(authOperations.logIn({ email, password }));\n\n    // setEmail('');\n    // setPassword('');\n  };\n\n \n  const checkLang = lang[1].language;\n  const messageNotValid = checkLang === \"en\"? \"The input is not valid E-mail!\": \"Eлектронна скринька введена в невірному форматі\";\n  console.log(messageNotValid);\n  \n  return (\n\n    <Form\n      name=\"normal_login\"\n      className={s.loginForm}\n      initialValues={{\n        remember: true,\n      }}\n      labelCol={{\n        span: 8,\n      }}\n      wrapperCol={{\n        span: 16,\n      }}\n      onFinish={onFinish}\n    >\n      \n      <Form.Item\n        name=\"email\"\n        label={t(\"singInForm.email\")}\n        onChange={e =>setEmail(e.target.value)}\n        \n        rules={[\n          {\n            type: 'email',\n            message: messageNotValid,\n          },\n          {\n            required: true,\n            message: 'Please input your E-mail!',\n          },\n        ]}\n      >\n        <Input\n        className={s.containerInput}       \n        placeholder={t(\"singInForm.placeholderEmail\")}\n        prefix={<SettingFilled />}/> \n        </Form.Item>\n\n      <Form.Item\n       label=\"Password\"\n        name={t(\"singInForm.password\")}\n        onChange={e =>setPassword(e.target.value)}\n        rules={[\n          {\n            required: true,\n            message: 'Please input your Password!',\n          },\n        ]}\n      >\n        <Input.Password\n          className={s.containerInput}\n          prefix={<LockOutlined className={s.siteFormItemIcon} />}\n          type=\"password\"\n          placeholder={t(\"singInForm.placeholderPassword\")}\n        />\n      </Form.Item>\n\n\n      <Form.Item>\n\n        <Button\n          type=\"primary\"\n          htmlType=\"submit\"\n          className={s.button}\n          disabled={isBtnDisabled}\n          >\n          { t(\"singInForm.buttonLogIn\")}\n            </Button>\n            <div className={s.textContainer}>\n              <p>{t(\"singInForm.or\")} </p>\n               <a\n            className={s.link}\n            href=\"/register\">{t(\"singInForm.gooRegisterForm\")}</a>\n            </div>\n      </Form.Item>\n    </Form>\n\n\n  );\n};\n\nexport default SingInForm;","import SingInForm from 'components/SingInForm';\nimport Appear from 'components/Appear';\nimport './style.css'\n\n\nconst SingInPage = () => {\n  return (\n    <Appear time={350}>\n      <SingInForm />\n    </Appear>\n  )\n}\n\nexport default SingInPage;"],"sourceRoot":""}