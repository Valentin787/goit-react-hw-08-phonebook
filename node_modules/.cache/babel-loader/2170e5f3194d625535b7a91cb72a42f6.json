{"ast":null,"code":"var _jsxFileName = \"/Users/valentinkuzmich/Desktop/projects Go IT/goit-react-hw-08-phonebook/src/components/DateCalendar/CalendarForm/CalendarForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport '../DateCalendar.scss';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CalendarForm = _ref => {\n  _s();\n\n  let {\n    value,\n    submit,\n    update\n  } = _ref;\n  // console.log(`value->`, value)\n  // console.log(`submit->`, submit)\n  //  console.log(`update->`, update)\n  const [newEvent, setNewEvent] = useState(\"\");\n\n  const addEvent = e => {\n    if (e) e.preventDefault();\n    let event = this.state.event.trim();\n    console.log();\n    if (!event) return;\n    let events = this.state.events;\n    let date = this.state.cursor;\n    if (!events[date]) events[date] = [];\n    events[date].push(event);\n    this.setState({\n      event: \"\",\n      events: events\n    });\n    this.saveEvents();\n  };\n\n  const normalizeName = name => name.split(' ').map(word => {\n    const firstUpCaseLetter = word.charAt(0).toUpperCase();\n    const anoterLetter = word.substring(1);\n    return `${firstUpCaseLetter}${anoterLetter}`;\n  }).join(' ');\n\n  const onSubFormData = e => {\n    e.preventDefault();\n    const objData = {\n      name: normalizeName(newEvent),\n      id: nanoid()\n    };\n    console.log(objData); //  confirmContact(objData);\n\n    setNewEvent();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: e => onSubFormData(e),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input-main\",\n        name: \"event\",\n        onChange: e => setNewEvent(e.target.value),\n        type: \"text\",\n        placeholder: \"New Event...\",\n        value: newEvent,\n        pattern: \"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",\n        title: \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"addButton btn-main\",\n        type: \"submit\" // class=\"btn-main\"\n        ,\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CalendarForm, \"GKfFQIHlgwhsd/7Dd6WD229b3ss=\");\n\n_c = CalendarForm;\nCalendarForm.propTypes = {\n  value: PropTypes.string,\n  submit: PropTypes.func,\n  update: PropTypes.func\n};\nexport default CalendarForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarForm\");","map":{"version":3,"names":["React","useState","PropTypes","nanoid","CalendarForm","value","submit","update","newEvent","setNewEvent","addEvent","e","preventDefault","event","state","trim","console","log","events","date","cursor","push","setState","saveEvents","normalizeName","name","split","map","word","firstUpCaseLetter","charAt","toUpperCase","anoterLetter","substring","join","onSubFormData","objData","id","target","propTypes","string","func"],"sources":["/Users/valentinkuzmich/Desktop/projects Go IT/goit-react-hw-08-phonebook/src/components/DateCalendar/CalendarForm/CalendarForm.jsx"],"sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\nimport '../DateCalendar.scss';\nimport { nanoid } from 'nanoid';\n\n\nconst CalendarForm = ({value, submit, update}) => {\n  // console.log(`value->`, value)\n  // console.log(`submit->`, submit)\n  //  console.log(`update->`, update)\n\n  const [newEvent, setNewEvent] = useState(\"\");\n\n\n\n    const addEvent=(e)=> {\n    if (e) e.preventDefault();\n      let event = this.state.event.trim();\n      console.log()\n    if (!event) return;\n    let events = this.state.events;\n    let date = this.state.cursor;\n    if (!events[date]) events[date] = [];\n    events[date].push(event);\n    this.setState({ event: \"\", events: events });\n    this.saveEvents();\n    }\n  \n   const normalizeName = name => name\n      .split(' ')\n      .map(word => {\n        const firstUpCaseLetter = word.charAt(0).toUpperCase();\n        const anoterLetter = word.substring(1);\n        return `${firstUpCaseLetter}${anoterLetter}`;\n      })\n      .join(' ');\n\n  const onSubFormData = e => {\n    e.preventDefault();\n\n    const objData = {\n      name:normalizeName(newEvent),\n      id:nanoid()\n    };\n    console.log(objData)\n      //  confirmContact(objData);\n    setNewEvent();\n  };\n\n  return (\n         <form onSubmit={(e) => onSubFormData(e)}>\n        <div className=\"input-group\">\n          <input\n          className=\"input-main\"\n          name='event'\n            onChange={(e) => setNewEvent(e.target.value)}\n            type=\"text\"\n            placeholder=\"New Event...\"\n            value={newEvent}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          ></input>\n          <button\n            className=\"addButton btn-main\"\n            type=\"submit\"\n            // class=\"btn-main\"\n          >\n            +\n          </button>\n        </div>\n      </form>\n  )\n}\n\nCalendarForm.propTypes = {\n  value: PropTypes.string,\n  submit: PropTypes.func,\n  update: PropTypes.func,\n  \n}\n\nexport default CalendarForm"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,sBAAP;AACA,SAASC,MAAT,QAAuB,QAAvB;;;AAGA,MAAMC,YAAY,GAAG,QAA6B;EAAA;;EAAA,IAA5B;IAACC,KAAD;IAAQC,MAAR;IAAgBC;EAAhB,CAA4B;EAChD;EACA;EACA;EAEA,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,EAAD,CAAxC;;EAIE,MAAMS,QAAQ,GAAEC,CAAD,IAAM;IACrB,IAAIA,CAAJ,EAAOA,CAAC,CAACC,cAAF;IACL,IAAIC,KAAK,GAAG,KAAKC,KAAL,CAAWD,KAAX,CAAiBE,IAAjB,EAAZ;IACAC,OAAO,CAACC,GAAR;IACF,IAAI,CAACJ,KAAL,EAAY;IACZ,IAAIK,MAAM,GAAG,KAAKJ,KAAL,CAAWI,MAAxB;IACA,IAAIC,IAAI,GAAG,KAAKL,KAAL,CAAWM,MAAtB;IACA,IAAI,CAACF,MAAM,CAACC,IAAD,CAAX,EAAmBD,MAAM,CAACC,IAAD,CAAN,GAAe,EAAf;IACnBD,MAAM,CAACC,IAAD,CAAN,CAAaE,IAAb,CAAkBR,KAAlB;IACA,KAAKS,QAAL,CAAc;MAAET,KAAK,EAAE,EAAT;MAAaK,MAAM,EAAEA;IAArB,CAAd;IACA,KAAKK,UAAL;EACC,CAXD;;EAaD,MAAMC,aAAa,GAAGC,IAAI,IAAIA,IAAI,CAC9BC,KAD0B,CACpB,GADoB,EAE1BC,GAF0B,CAEtBC,IAAI,IAAI;IACX,MAAMC,iBAAiB,GAAGD,IAAI,CAACE,MAAL,CAAY,CAAZ,EAAeC,WAAf,EAA1B;IACA,MAAMC,YAAY,GAAGJ,IAAI,CAACK,SAAL,CAAe,CAAf,CAArB;IACA,OAAQ,GAAEJ,iBAAkB,GAAEG,YAAa,EAA3C;EACD,CAN0B,EAO1BE,IAP0B,CAOrB,GAPqB,CAA9B;;EASD,MAAMC,aAAa,GAAGxB,CAAC,IAAI;IACzBA,CAAC,CAACC,cAAF;IAEA,MAAMwB,OAAO,GAAG;MACdX,IAAI,EAACD,aAAa,CAAChB,QAAD,CADJ;MAEd6B,EAAE,EAAClC,MAAM;IAFK,CAAhB;IAIAa,OAAO,CAACC,GAAR,CAAYmB,OAAZ,EAPyB,CAQvB;;IACF3B,WAAW;EACZ,CAVD;;EAYA,oBACO;IAAM,QAAQ,EAAGE,CAAD,IAAOwB,aAAa,CAACxB,CAAD,CAApC;IAAA,uBACD;MAAK,SAAS,EAAC,aAAf;MAAA,wBACE;QACA,SAAS,EAAC,YADV;QAEA,IAAI,EAAC,OAFL;QAGE,QAAQ,EAAGA,CAAD,IAAOF,WAAW,CAACE,CAAC,CAAC2B,MAAF,CAASjC,KAAV,CAH9B;QAIE,IAAI,EAAC,MAJP;QAKE,WAAW,EAAC,cALd;QAME,KAAK,EAAEG,QANT;QAOE,OAAO,EAAC,wHAPV;QAQE,KAAK,EAAC,wIARR;QASE,QAAQ;MATV;QAAA;QAAA;QAAA;MAAA,QADF,eAYE;QACE,SAAS,EAAC,oBADZ;QAEE,IAAI,EAAC,QAFP,CAGE;QAHF;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAZF;IAAA;MAAA;MAAA;MAAA;IAAA;EADC;IAAA;IAAA;IAAA;EAAA,QADP;AAwBD,CAnED;;GAAMJ,Y;;KAAAA,Y;AAqENA,YAAY,CAACmC,SAAb,GAAyB;EACvBlC,KAAK,EAAEH,SAAS,CAACsC,MADM;EAEvBlC,MAAM,EAAEJ,SAAS,CAACuC,IAFK;EAGvBlC,MAAM,EAAEL,SAAS,CAACuC;AAHK,CAAzB;AAOA,eAAerC,YAAf"},"metadata":{},"sourceType":"module"}