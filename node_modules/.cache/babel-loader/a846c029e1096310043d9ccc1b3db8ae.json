{"ast":null,"code":"var _jsxFileName = \"/Users/valentinkuzmich/Desktop/projects Go IT/goit-react-hw-08-phonebook/src/components/DateCalendar/CalendarForm/CalendarForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport '../DateCalendar.scss';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getEvents, addEvent, deleteEvent } from 'redux/event/eventOperation';\nimport { eventsState, loadingSelector, errorSelector } from 'redux/event/eventsSelectors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CalendarForm = _ref => {\n  _s();\n\n  let {\n    value,\n    submit,\n    update\n  } = _ref;\n  // console.log(`value->`, value)\n  // console.log(`submit->`, submit)\n  //  console.log(`update->`, update)\n  const dispatch = useDispatch();\n  const loading = useSelector(loadingSelector);\n  const error = useSelector(errorSelector);\n  const [eventName, setEventName] = useState(\"\");\n  const [newEvent, setNewEvent] = useState(null); // const addEvent=(e)=> {\n  // if (e) e.preventDefault();\n  //   let event = this.state.event.trim();\n  //   console.log()\n  // if (!event) return;\n  // let events = this.state.events;\n  // let date = this.state.cursor;\n  // if (!events[date]) events[date] = [];\n  // events[date].push(event);\n  // this.setState({ event: \"\", events: events });\n  // this.saveEvents();\n  // }\n  //ADAPTED_NAME\n\n  const normalizeName = name => name.split(' ').map(word => {\n    const firstUpCaseLetter = word.charAt(0).toUpperCase();\n    const anoterLetter = word.substring(1);\n    return `${firstUpCaseLetter}${anoterLetter}`;\n  }).join(' '); //GET_EVENTS\n\n\n  useEffect(() => {\n    dispatch(getEvents());\n  }, [dispatch]); //ADD_NEW_EVENT\n\n  const confirmContact = event => setNewEvent(event);\n\n  useEffect(() => {\n    if (!newEvent) return;\n    dispatch(addEvent(newEvent));\n    setNewEvent(null);\n  }, [dispatch, newEvent]); //SUBMIT_FORM\n\n  const onSubFormData = e => {\n    e.preventDefault();\n    const objEvent = {\n      name: normalizeName(eventName),\n      id: nanoid()\n    };\n    confirmContact(objEvent);\n    setEventName(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: onSubFormData,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input-main\",\n        name: \"event\",\n        onChange: e => setEventName(e.target.value),\n        type: \"text\",\n        placeholder: \"New Event...\",\n        value: eventName,\n        pattern: \"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",\n        title: \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"addButton btn-main\",\n        type: \"submit\" // class=\"btn-main\"\n        ,\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CalendarForm, \"Ipfb0NAU7pYimAjjzDWcdMbFqNg=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = CalendarForm;\nCalendarForm.propTypes = {\n  value: PropTypes.string,\n  submit: PropTypes.func,\n  update: PropTypes.func\n};\nexport default CalendarForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarForm\");","map":{"version":3,"names":["React","useEffect","useState","PropTypes","nanoid","useDispatch","useSelector","getEvents","addEvent","deleteEvent","eventsState","loadingSelector","errorSelector","CalendarForm","value","submit","update","dispatch","loading","error","eventName","setEventName","newEvent","setNewEvent","normalizeName","name","split","map","word","firstUpCaseLetter","charAt","toUpperCase","anoterLetter","substring","join","confirmContact","event","onSubFormData","e","preventDefault","objEvent","id","target","propTypes","string","func"],"sources":["/Users/valentinkuzmich/Desktop/projects Go IT/goit-react-hw-08-phonebook/src/components/DateCalendar/CalendarForm/CalendarForm.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types';\nimport '../DateCalendar.scss';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getEvents, addEvent, deleteEvent } from 'redux/event/eventOperation';\nimport { eventsState, loadingSelector,errorSelector } from 'redux/event/eventsSelectors';\n\n\n  \nconst CalendarForm = ({value, submit, update}) => {\n  // console.log(`value->`, value)\n  // console.log(`submit->`, submit)\n  //  console.log(`update->`, update)\n\n  const dispatch = useDispatch();\n  const loading = useSelector(loadingSelector);\n  const error = useSelector(errorSelector);\n  \n\n\n  const [eventName, setEventName] = useState(\"\");\n  const [newEvent, setNewEvent] = useState(null);\n\n\n\n    // const addEvent=(e)=> {\n    // if (e) e.preventDefault();\n    //   let event = this.state.event.trim();\n    //   console.log()\n    // if (!event) return;\n    // let events = this.state.events;\n    // let date = this.state.cursor;\n    // if (!events[date]) events[date] = [];\n    // events[date].push(event);\n    // this.setState({ event: \"\", events: events });\n    // this.saveEvents();\n    // }\n  \n  \n//ADAPTED_NAME\n   const normalizeName = name => name\n      .split(' ')\n      .map(word => {\n        const firstUpCaseLetter = word.charAt(0).toUpperCase();\n        const anoterLetter = word.substring(1);\n        return `${firstUpCaseLetter}${anoterLetter}`;\n      })\n     .join(' ');\n  \n//GET_EVENTS\n  \n  useEffect(() => {\n    dispatch(getEvents())\n  }, [dispatch])\n  \n//ADD_NEW_EVENT\n  const confirmContact = (event) => setNewEvent(event)\n\n  useEffect(() => {\n    if (!newEvent) return;\n\n    dispatch(addEvent(newEvent))\n\n    setNewEvent(null);\n\n\n  }, [dispatch, newEvent])\n  \n    \n//SUBMIT_FORM\n  const onSubFormData = e => {\n    e.preventDefault();\n\n    const objEvent = {\n      name:normalizeName(eventName),\n      id:nanoid()\n    };\n \n    confirmContact(objEvent);\n    setEventName(\"\");\n  };\n\n  return (\n         <form onSubmit={onSubFormData}>\n        <div className=\"input-group\">\n          <input\n          className=\"input-main\"\n          name='event'\n          onChange={e => setEventName(e.target.value)}\n            type=\"text\"\n            placeholder=\"New Event...\"\n            value={eventName}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          ></input>\n          <button\n            className=\"addButton btn-main\"\n            type=\"submit\"\n            // class=\"btn-main\"\n          >\n            +\n          </button>\n        </div>\n      </form>\n  )\n}\n\nCalendarForm.propTypes = {\n  value: PropTypes.string,\n  submit: PropTypes.func,\n  update: PropTypes.func,\n  \n}\n\nexport default CalendarForm"],"mappings":"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"},"metadata":{},"sourceType":"module"}